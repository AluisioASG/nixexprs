diff --git i/src/named.rs w/src/named.rs
index 7d11e5c..ee79f50 100644
--- i/src/named.rs
+++ w/src/named.rs
@@ -33,6 +33,7 @@ extern crate futures;
 extern crate log;
 #[cfg(feature = "dns-over-rustls")]
 extern crate rustls;
+extern crate socket2;
 extern crate tokio;
 extern crate trust_dns_client;
 #[cfg(feature = "dns-over-openssl")]
@@ -410,9 +411,20 @@ fn main() {
     // load all the listeners
     for udp_socket in &sockaddrs {
         info!("binding UDP to {:?}", udp_socket);
+        use socket2::{Domain, Protocol, Socket, Type};
+        let base_socket = match udp_socket {
+            SocketAddr::V4(..) => Socket::new(Domain::ipv4(), Type::dgram(), Some(Protocol::udp())),
+            SocketAddr::V6(..) => Socket::new(Domain::ipv6(), Type::dgram(), Some(Protocol::udp())),
+        }.unwrap_or_else(|_| panic!("could not create udp socket: {}", udp_socket));
+        if base_socket.set_reuse_address(true).is_err() {
+            error!("failed to enable address reuse for udp socket: {}", udp_socket);
+        }
+        if base_socket.bind(&udp_socket.clone().into()).is_err() {
+            panic!("could not bind to udp: {}", udp_socket);
+        }
         let udp_socket = runtime
-            .block_on(UdpSocket::bind(udp_socket))
-            .unwrap_or_else(|_| panic!("could not bind to udp: {}", udp_socket));
+            .block_on(async move { UdpSocket::from_std(base_socket.into()) })
+            .unwrap_or_else(|_| panic!("bad handle for udp socket: {}", udp_socket));

         info!(
             "listening for UDP on {:?}",
